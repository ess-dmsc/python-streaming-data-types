# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class da00_DataArray(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = da00_DataArray()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsda00_DataArray(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def da00_DataArrayBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x64\x61\x30\x30", size_prefixed=size_prefixed
        )

    # da00_DataArray
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # da00_DataArray
    def SourceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # da00_DataArray
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint64Flags, o + self._tab.Pos
            )
        return 0

    # da00_DataArray
    def Variables(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from streaming_data_types.fbschemas.dataarray_da00.da00_Variable import (
                da00_Variable,
            )

            obj = da00_Variable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # da00_DataArray
    def VariablesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # da00_DataArray
    def VariablesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # da00_DataArray
    def Constants(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from streaming_data_types.fbschemas.dataarray_da00.da00_Variable import (
                da00_Variable,
            )

            obj = da00_Variable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # da00_DataArray
    def ConstantsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # da00_DataArray
    def ConstantsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # da00_DataArray
    def Attributes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from streaming_data_types.fbschemas.dataarray_da00.da00_Variable import (
                da00_Variable,
            )

            obj = da00_Variable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # da00_DataArray
    def AttributesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # da00_DataArray
    def AttributesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0


def da00_DataArrayStart(builder):
    builder.StartObject(5)


def Start(builder):
    return da00_DataArrayStart(builder)


def da00_DataArrayAddSourceName(builder, sourceName):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(sourceName), 0
    )


def AddSourceName(builder, sourceName):
    return da00_DataArrayAddSourceName(builder, sourceName)


def da00_DataArrayAddTimestamp(builder, timestamp):
    builder.PrependUint64Slot(1, timestamp, 0)


def AddTimestamp(builder, timestamp):
    return da00_DataArrayAddTimestamp(builder, timestamp)


def da00_DataArrayAddVariables(builder, variables):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(variables), 0
    )


def AddVariables(builder, variables):
    return da00_DataArrayAddVariables(builder, variables)


def da00_DataArrayStartVariablesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartVariablesVector(builder, numElems):
    return da00_DataArrayStartVariablesVector(builder, numElems)


def da00_DataArrayAddConstants(builder, constants):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(constants), 0
    )


def AddConstants(builder, constants):
    return da00_DataArrayAddConstants(builder, constants)


def da00_DataArrayStartConstantsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartConstantsVector(builder, numElems):
    return da00_DataArrayStartConstantsVector(builder, numElems)


def da00_DataArrayAddAttributes(builder, attributes):
    builder.PrependUOffsetTRelativeSlot(
        4, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0
    )


def AddAttributes(builder, attributes):
    return da00_DataArrayAddAttributes(builder, attributes)


def da00_DataArrayStartAttributesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartAttributesVector(builder, numElems):
    return da00_DataArrayStartAttributesVector(builder, numElems)


def da00_DataArrayEnd(builder):
    return builder.EndObject()


def End(builder):
    return da00_DataArrayEnd(builder)
