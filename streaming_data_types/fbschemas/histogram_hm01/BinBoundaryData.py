# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class BinBoundaryData(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BinBoundaryData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBinBoundaryData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def BinBoundaryDataBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x68\x6D\x30\x31", size_prefixed=size_prefixed
        )

    # BinBoundaryData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BinBoundaryData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BinBoundaryData
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BinBoundaryData
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BinBoundaryData
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # BinBoundaryData
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint8Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1),
            )
        return 0

    # BinBoundaryData
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # BinBoundaryData
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BinBoundaryData
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0


def BinBoundaryDataStart(builder):
    builder.StartObject(5)


def Start(builder):
    return BinBoundaryDataStart(builder)


def BinBoundaryDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0
    )


def AddName(builder, name):
    return BinBoundaryDataAddName(builder, name)


def BinBoundaryDataAddUnit(builder, unit):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0
    )


def AddUnit(builder, unit):
    return BinBoundaryDataAddUnit(builder, unit)


def BinBoundaryDataAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0
    )


def AddLabel(builder, label):
    return BinBoundaryDataAddLabel(builder, label)


def BinBoundaryDataAddDataType(builder, dataType):
    builder.PrependInt8Slot(3, dataType, 0)


def AddDataType(builder, dataType):
    return BinBoundaryDataAddDataType(builder, dataType)


def BinBoundaryDataAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(
        4, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0
    )


def AddData(builder, data):
    return BinBoundaryDataAddData(builder, data)


def BinBoundaryDataStartDataVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)


def StartDataVector(builder, numElems):
    return BinBoundaryDataStartDataVector(builder, numElems)


def BinBoundaryDataEnd(builder):
    return builder.EndObject()


def End(builder):
    return BinBoundaryDataEnd(builder)
