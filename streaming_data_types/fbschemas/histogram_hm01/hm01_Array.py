# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class hm01_Array(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = hm01_Array()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAshm01_Array(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def hm01_ArrayBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x68\x6D\x30\x31", size_prefixed=size_prefixed
        )

    # hm01_Array
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # hm01_Array
    def SourceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # hm01_Array
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # hm01_Array
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint64Flags, o + self._tab.Pos
            )
        return 0

    # hm01_Array
    def Dimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from BinBoundaryData import BinBoundaryData

            obj = BinBoundaryData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # hm01_Array
    def DimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # hm01_Array
    def DimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # hm01_Array
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from HistogramData import HistogramData

            obj = HistogramData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # hm01_Array
    def Errors(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from HistogramData import HistogramData

            obj = HistogramData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # hm01_Array
    def Attributes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Attribute import Attribute

            obj = Attribute()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # hm01_Array
    def AttributesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # hm01_Array
    def AttributesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0


def hm01_ArrayStart(builder):
    builder.StartObject(7)


def Start(builder):
    return hm01_ArrayStart(builder)


def hm01_ArrayAddSourceName(builder, sourceName):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(sourceName), 0
    )


def AddSourceName(builder, sourceName):
    return hm01_ArrayAddSourceName(builder, sourceName)


def hm01_ArrayAddId(builder, id):
    builder.PrependInt32Slot(1, id, 0)


def AddId(builder, id):
    return hm01_ArrayAddId(builder, id)


def hm01_ArrayAddTimestamp(builder, timestamp):
    builder.PrependUint64Slot(2, timestamp, 0)


def AddTimestamp(builder, timestamp):
    return hm01_ArrayAddTimestamp(builder, timestamp)


def hm01_ArrayAddDimensions(builder, dimensions):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(dimensions), 0
    )


def AddDimensions(builder, dimensions):
    return hm01_ArrayAddDimensions(builder, dimensions)


def hm01_ArrayStartDimensionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartDimensionsVector(builder, numElems):
    return hm01_ArrayStartDimensionsVector(builder, numElems)


def hm01_ArrayAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(
        4, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0
    )


def AddData(builder, data):
    return hm01_ArrayAddData(builder, data)


def hm01_ArrayAddErrors(builder, errors):
    builder.PrependUOffsetTRelativeSlot(
        5, flatbuffers.number_types.UOffsetTFlags.py_type(errors), 0
    )


def AddErrors(builder, errors):
    return hm01_ArrayAddErrors(builder, errors)


def hm01_ArrayAddAttributes(builder, attributes):
    builder.PrependUOffsetTRelativeSlot(
        6, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0
    )


def AddAttributes(builder, attributes):
    return hm01_ArrayAddAttributes(builder, attributes)


def hm01_ArrayStartAttributesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartAttributesVector(builder, numElems):
    return hm01_ArrayStartAttributesVector(builder, numElems)


def hm01_ArrayEnd(builder):
    return builder.EndObject()


def End(builder):
    return hm01_ArrayEnd(builder)
