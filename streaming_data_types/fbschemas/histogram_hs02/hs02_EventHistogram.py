# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

from typing import Optional

import flatbuffers
from flatbuffers.compat import import_numpy
from flatbuffers.table import Table

from .DimensionMetaData import DimensionMetaData

np = import_numpy()


class hs02_EventHistogram(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = hs02_EventHistogram()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAshs02_EventHistogram(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def hs02_EventHistogramBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x68\x73\x30\x32", size_prefixed=size_prefixed
        )

    # hs02_EventHistogram
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # hs02_EventHistogram
    def SourceName(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # hs02_EventHistogram
    def CurrentShape(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Int32Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4),
            )
        return 0

    # hs02_EventHistogram
    def CurrentShapeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # hs02_EventHistogram
    def CurrentShapeLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # hs02_EventHistogram
    def CurrentShapeIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # hs02_EventHistogram
    def DimMetadata(self, j: int) -> Optional[DimensionMetaData]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = DimensionMetaData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # hs02_EventHistogram
    def DimMetadataLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # hs02_EventHistogram
    def DimMetadataIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # hs02_EventHistogram
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # hs02_EventHistogram
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # hs02_EventHistogram
    def Data(self) -> Optional[flatbuffers.table.Table]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # hs02_EventHistogram
    def ErrorsType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # hs02_EventHistogram
    def Errors(self) -> Optional[flatbuffers.table.Table]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # hs02_EventHistogram
    def Offset(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Int32Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4),
            )
        return 0

    # hs02_EventHistogram
    def OffsetAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # hs02_EventHistogram
    def OffsetLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # hs02_EventHistogram
    def OffsetIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # hs02_EventHistogram
    def LastMetadataTimestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # hs02_EventHistogram
    def Info(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None


def hs02_EventHistogramStart(builder: flatbuffers.Builder):
    builder.StartObject(11)


def Start(builder: flatbuffers.Builder):
    hs02_EventHistogramStart(builder)


def hs02_EventHistogramAddSourceName(builder: flatbuffers.Builder, sourceName: int):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(sourceName), 0
    )


def AddSourceName(builder: flatbuffers.Builder, sourceName: int):
    hs02_EventHistogramAddSourceName(builder, sourceName)


def hs02_EventHistogramAddCurrentShape(builder: flatbuffers.Builder, currentShape: int):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(currentShape), 0
    )


def AddCurrentShape(builder: flatbuffers.Builder, currentShape: int):
    hs02_EventHistogramAddCurrentShape(builder, currentShape)


def hs02_EventHistogramStartCurrentShapeVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)


def StartCurrentShapeVector(builder, numElems: int) -> int:
    return hs02_EventHistogramStartCurrentShapeVector(builder, numElems)


def hs02_EventHistogramAddDimMetadata(builder: flatbuffers.Builder, dimMetadata: int):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(dimMetadata), 0
    )


def AddDimMetadata(builder: flatbuffers.Builder, dimMetadata: int):
    hs02_EventHistogramAddDimMetadata(builder, dimMetadata)


def hs02_EventHistogramStartDimMetadataVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)


def StartDimMetadataVector(builder, numElems: int) -> int:
    return hs02_EventHistogramStartDimMetadataVector(builder, numElems)


def hs02_EventHistogramAddTimestamp(builder: flatbuffers.Builder, timestamp: int):
    builder.PrependInt64Slot(3, timestamp, 0)


def AddTimestamp(builder: flatbuffers.Builder, timestamp: int):
    hs02_EventHistogramAddTimestamp(builder, timestamp)


def hs02_EventHistogramAddDataType(builder: flatbuffers.Builder, dataType: int):
    builder.PrependUint8Slot(4, dataType, 0)


def AddDataType(builder: flatbuffers.Builder, dataType: int):
    hs02_EventHistogramAddDataType(builder, dataType)


def hs02_EventHistogramAddData(builder: flatbuffers.Builder, data: int):
    builder.PrependUOffsetTRelativeSlot(
        5, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0
    )


def AddData(builder: flatbuffers.Builder, data: int):
    hs02_EventHistogramAddData(builder, data)


def hs02_EventHistogramAddErrorsType(builder: flatbuffers.Builder, errorsType: int):
    builder.PrependUint8Slot(6, errorsType, 0)


def AddErrorsType(builder: flatbuffers.Builder, errorsType: int):
    hs02_EventHistogramAddErrorsType(builder, errorsType)


def hs02_EventHistogramAddErrors(builder: flatbuffers.Builder, errors: int):
    builder.PrependUOffsetTRelativeSlot(
        7, flatbuffers.number_types.UOffsetTFlags.py_type(errors), 0
    )


def AddErrors(builder: flatbuffers.Builder, errors: int):
    hs02_EventHistogramAddErrors(builder, errors)


def hs02_EventHistogramAddOffset(builder: flatbuffers.Builder, offset: int):
    builder.PrependUOffsetTRelativeSlot(
        8, flatbuffers.number_types.UOffsetTFlags.py_type(offset), 0
    )


def AddOffset(builder: flatbuffers.Builder, offset: int):
    hs02_EventHistogramAddOffset(builder, offset)


def hs02_EventHistogramStartOffsetVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)


def StartOffsetVector(builder, numElems: int) -> int:
    return hs02_EventHistogramStartOffsetVector(builder, numElems)


def hs02_EventHistogramAddLastMetadataTimestamp(
    builder: flatbuffers.Builder, lastMetadataTimestamp: int
):
    builder.PrependInt64Slot(9, lastMetadataTimestamp, 0)


def AddLastMetadataTimestamp(builder: flatbuffers.Builder, lastMetadataTimestamp: int):
    hs02_EventHistogramAddLastMetadataTimestamp(builder, lastMetadataTimestamp)


def hs02_EventHistogramAddInfo(builder: flatbuffers.Builder, info: int):
    builder.PrependUOffsetTRelativeSlot(
        10, flatbuffers.number_types.UOffsetTFlags.py_type(info), 0
    )


def AddInfo(builder: flatbuffers.Builder, info: int):
    hs02_EventHistogramAddInfo(builder, info)


def hs02_EventHistogramEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()


def End(builder: flatbuffers.Builder) -> int:
    return hs02_EventHistogramEnd(builder)
