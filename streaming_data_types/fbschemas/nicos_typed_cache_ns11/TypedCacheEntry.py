# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()


# pylint: skip-file
class TypedCacheEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTypedCacheEntry(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TypedCacheEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def TypedCacheEntryBufferHasIdentifier(cls, buf, offset,
                                           size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset,
                                                    b"\x6E\x73\x31\x31",
                                                    size_prefixed=size_prefixed)

    # TypedCacheEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TypedCacheEntry
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TypedCacheEntry
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags,
                                 o + self._tab.Pos)
        return 0.0

    # TypedCacheEntry
    def Ttl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags,
                                 o + self._tab.Pos)
        return 0.0

    # TypedCacheEntry
    def Expired(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags,
                                      o + self._tab.Pos))
        return False

    # TypedCacheEntry
    def ValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags,
                                 o + self._tab.Pos)
        return 0

    # TypedCacheEntry
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None


def TypedCacheEntryStart(builder):
    builder.StartObject(6)


def TypedCacheEntryAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.
                                        UOffsetTFlags.py_type(key), 0)


def TypedCacheEntryAddTime(builder, time):
    builder.PrependFloat64Slot(1, time, 0.0)


def TypedCacheEntryAddTtl(builder, ttl):
    builder.PrependFloat64Slot(2, ttl, 0.0)


def TypedCacheEntryAddExpired(builder, expired):
    builder.PrependBoolSlot(3, expired, 0)


def TypedCacheEntryAddValueType(builder, valueType):
    builder.PrependUint8Slot(4, valueType, 0)


def TypedCacheEntryAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.
                                        UOffsetTFlags.py_type(value), 0)


def TypedCacheEntryEnd(builder):
    return builder.EndObject()
